{"ast":null,"code":"import axios from 'axios';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthTocken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/basicauth', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthTocken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    // let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    // console.log(\"registerSuccessfulLogin\")\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthTocken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/manav/Documents/in28Minutes/todo-app/src/Component/todo/AuthenticationService.js"],"names":["axios","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthTocken","executeJwtAuthenticationService","post","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJwtToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOL,KAAK,CAACM,GAAN,CAAU,iCAAV,EACD;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,qBAAL,CAA2BL,QAA3B,EAAqCC,QAArC;AAAhB;AAAV,KADC,CAAP;AAEH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOL,KAAK,CAACW,IAAN,CAAW,iCAAX,EAA8C;AAACP,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAA9C,CAAP;AACH;;AAEDI,EAAAA,qBAAqB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDS,EAAAA,uBAAuB,CAACV,QAAD,EAAWC,QAAX,EAAqB;AACzC;AACA;AACCU,IAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKR,qBAAL,CAA2BL,QAA3B,EAAqCC,QAArC,CAA5B;AACH;;AAEDa,EAAAA,6BAA6B,CAACd,QAAD,EAAWe,KAAX,EAAkB;AAC3CJ,IAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAWA,KAAlB;AACH;;AAGDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0BrB,gCAA1B;AACH;;AAEDsB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDP,EAAAA,sBAAsB,CAACU,eAAD,EAAkB;AACpC3B,IAAAA,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACnC,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BmB,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KALL;AAOH;;AAvDuB;;AA0D5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n    executeBasicAuthenticationService(username, password) {\n        return axios.get('http://localhost:8080/basicauth'\n            , {headers: {authorization: this.createBasicAuthTocken(username, password)}} )\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post('http://localhost:8080/basicauth', {username, password})\n    }\n\n    createBasicAuthTocken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n       // let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n       // console.log(\"registerSuccessfulLogin\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthTocken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJwtToken(token))\n    }\n\n    createJwtToken(token) {\n        return 'Bearer '+ token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUsername() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use((config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}