{"ast":null,"code":"import axios from 'axios';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  /*\n      executeBasicAuthenticationService(username, password) {\n          return axios.get('http://localhost:8080/basicauth',\n              {headers: {authorisation: this.createBasicAuthTocken(username, password)}})\n      }\n  */\n  createBasicAuthTocken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/manav/Documents/in28Minutes/todo-app/src/Component/todo/AuthenticationService.js"],"names":["axios","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","createBasicAuthTocken","username","password","window","btoa","registerSuccessfulLogin","basicAuthHeader","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExB;AACJ;AACA;AACA;AACA;AACA;AAEIC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAQ,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH;;AAEDG,EAAAA,uBAAuB,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AACxC,QAAII,eAAe,GAAG,WAAWH,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AACAK,IAAAA,cAAc,CAACC,OAAf,CAAuBV,gCAAvB,EAAyDG,QAAzD;AACA,SAAKQ,sBAAL,CAA4BH,eAA5B;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0Bb,gCAA1B;AACH;;AAEDc,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIe,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIe,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,CAACH,eAAD,EAAkB;AACpCT,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AAAEO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+Bf,eAA/B;AAAgD;;AAC7E,aAAOa,MAAP;AACH,KAJL;AAMH;;AA1CuB;;AA6C5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    /*\n        executeBasicAuthenticationService(username, password) {\n            return axios.get('http://localhost:8080/basicauth',\n                {headers: {authorisation: this.createBasicAuthTocken(username, password)}})\n        }\n    */\n\n    createBasicAuthTocken(username, password) {\n        return  'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(basicAuthHeader)\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUsername() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) { config.headers.authorization = basicAuthHeader }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}