{"ast":null,"code":"class AuthenticationService {\n  registerSuccessfulLogin(uername, password) {\n    sessionStorage.setItem(\"authenticatedUser\", uername);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'in28Minutes';\n    let password = 'dummy';\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/manav/Documents/in28Minutes/todo-app/src/Component/todo/AuthenticationService.js"],"names":["AuthenticationService","registerSuccessfulLogin","uername","password","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","setupAxiosInterceptors","username","basicAuthHeader","window","btoa","axios","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,MAAMA,qBAAN,CAA4B;AAExBC,EAAAA,uBAAuB,CAACC,OAAD,EAAUC,QAAV,EAAoB;AACvCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,OAA5C;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAG,IAAX,EAAiB,OAAO,KAAP;AACjB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAG,IAAX,EAAiB,OAAO,EAAP;AACjB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AACrB,QAAIC,QAAQ,GAAG,aAAf;AACA,QAAIV,QAAQ,GAAG,OAAf;AACA,QAAIW,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBV,QAA7B,CAAjC;AAEAc,IAAAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKb,cAAL,EAAJ,EAA2B;AACvBa,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BT,eAA/B;AACH;AACJ,KALL;AAOH;;AAlCuB;;AAqC5B,eAAe,IAAId,qBAAJ,EAAf","sourcesContent":["class AuthenticationService {\n\n    registerSuccessfulLogin(uername, password) {\n        sessionStorage.setItem(\"authenticatedUser\", uername)\n    }\n\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\")\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user===null) return false\n        return true\n    }\n\n    getLoggedInUsername() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user===null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors() {\n        let username = 'in28Minutes'\n        let password = 'dummy'\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password)\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader;\n                }\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}